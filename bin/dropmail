#!/usr/bin/perl
## ----------------------------------------------------------------------------

use strict;
use warnings;
use File::Basename;
use File::Copy;
use File::Slurp;
use JSON::Any;
use MIME::Lite;
use Log::Log4perl qw(get_logger);

## ----------------------------------------------------------------------------
# constants, setup and initialisation

my $VERSION = '0.3.0';

my $basedir = q{/var/lib/dropmail};

Log::Log4perl::init('/etc/dropmail.conf');
my $log = get_logger();

## ----------------------------------------------------------------------------

{
    $log->info( q{=} x 79 );
    $log->info( q{Started} );

    # get the filenames and then save various bits of info
    my @filenames = ( <$basedir/*.json>, <$basedir/*/*.json> );
    my @files;
    for my $filename ( @filenames ) {
        my $info = {};
        $info->{fullfile} = $filename;
        $info->{basename} = basename($filename);
        $info->{fulldir}  = dirname($filename);
        $info->{subdir}   = $info->{fulldir};
        if ( $info->{fulldir} eq q{/var/lib/dropmail} ) {
            $info->{subdir} = q{.};
        }
        else {
            $info->{subdir} = $info->{fulldir};
            ($info->{subdir}) = $info->{subdir} =~ m{ ([^\/]+) \z }xms;
        }
        push @files, $info;
    }

    # log the number we have found
    $log->info( q{Files found: } . (scalar @files) );

    # read each file in as a hash
    foreach my $file ( @files ) {
        $log->info( q{-} x 79 );
        $log->info( qq{File: $file->{basename}} );

        # check the file still exists (since another dropmail process might have taken it)
        unless ( -f qq{$basedir/$file->{subdir}/$file->{basename}} ) {
            $log->warn( qq{Couldn't find '$file->{basename}, skipping} );
            next;
        }

        # first thing to do is to move the file to processing
        unless ( mv_to_processing( $file ) ) {
            $log->warn( qq{$file->{basename} failed to move to processing} );
            next;
        }

        my $json = read_file( qq{$basedir/.processing/$file->{subdir}/$file->{basename}} );
        my $email = eval { JSON::Any->jsonToObj( $json ) };
        if ( $@ ) {
            # couldn't parse
            mv_to_failed( $file, qq{$file->{basename} couldn't parse as JSON: $@} );
            next;
        }

        unless ( ref $email eq 'HASH' ) {
            # not a hash
            mv_to_failed( $file, qq{$file->{basename} data structure is not a hash} );
            next;
        }

        eval { send_email($email); };
        if ( $@ ) {
            # couldn't send
            mv_to_failed( $file, qq{$file->{basename} couldn't be sent: $@} );
            next;
        }

        # this file was processed correctly
        mv_to_done( $file );
    }
    $log->info( q{-} x 79 );

    $log->info( q{Finished} );
    $log->info( q{=} x 79 );
}

## ----------------------------------------------------------------------------

sub mv_to_processing {
    my ($file) = @_;
    $log->debug( qq{Processing: $file->{basename}} );
    ensure_dir( qq{$basedir/.processing/$file->{subdir}/} );
    return move( qq{$basedir/$file->{subdir}/$file->{basename}}, qq{$basedir/.processing/$file->{subdir}/} );
}

sub mv_to_failed {
    my ($file, $msg) = @_;
    $log->warn( $msg );
    $log->info( qq{Failed: $file->{basename}} );
    ensure_dir( qq{$basedir/.failed/$file->{subdir}/} );
    return move( qq{$basedir/.processing/$file->{subdir}/$file->{basename}}, qq{$basedir/.failed/$file->{subdir}/} );
}

sub mv_to_done {
    my ($file) = @_;
    $log->info( qq{Done: $file->{basename}} );
    ensure_dir( qq{$basedir/.done/$file->{subdir}/} );
    return move( qq{$basedir/.processing/$file->{subdir}/$file->{basename}}, qq{$basedir/.done/$file->{subdir}/} );
}

sub ensure_dir {
    my ($dirname) = @_;
    return if -d $dirname;
    mkdir $dirname;
}

## ----------------------------------------------------------------------------

sub send_email {
    my ($email) = @_;

    # the things we need:
    # * from
    # * to (required, a scalar or an array of addresses)
    # * cc (optional, a scalar or an array of addresses)
    # * bcc (optional, a scalar or an array of addresses)
    # * copy_self (optional default false, boolean, will copy 'from' address to the 'bcc' address(es))
    # * subject (optional, string, default 'No Subject')
    # * text (required, string)
    # * html (optional, string
    # * ToDo: attachments

    unless ( defined $email->{to} ) {
        # log a warning
        die "No 'to' given";
    }

    unless ( defined $email->{from} ) {
        # log a warning
        die "No 'from' given";
    }

    unless ( defined $email->{text} ) {
        # log a warning
        die "No 'text' given";
    }

    $email->{copy_self} //= 0;
    $email->{subject} //= '[No Subject]';

    # tidy up some inputs so we know what we have
    if ( ref $email->{to} ne 'ARRAY' ) {
        $email->{to} = [ $email->{to} ];
    }
    if ( defined $email->{cc} and ref $email->{cc} ne 'ARRAY' ) {
        $email->{cc} = [ $email->{cc} ];
    }
    if ( defined $email->{bcc} and ref $email->{bcc} ne 'ARRAY' ) {
        $email->{bcc} = [ $email->{bcc} ];
    }

    my $msg;
    if ( defined $email->{html} ) {
        $msg = MIME::Lite->new(
            Type    => 'multipart/alternative',
        );
        # attach the plain text
        $msg->attach(
            Type    => q{text/plain; utf-8},
            Data    => $email->{text},
        );
        $msg->attach(
            Type    => q{text/html; utf-8},
            Data    => $email->{html},
        );
    }
    else {
        # just send a normal text message
        $msg = MIME::Lite->new(
            Data     => $email->{text},
        );
    }

    # copy this email to self if wanted
    if ( $email->{copy_self} ) {
        push @{$email->{bcc}}, $email->{from};
    }

    # do the required headers
    foreach my $hdr ( qw(from subject) ) {
        $msg->add($hdr, $email->{$hdr} );
    }

    # do the headers which can be from lists
    foreach my $hdr ( qw( to cc bcc ) ) {
        next unless defined $email->{$hdr};
        $msg->add( $hdr, _flatten($email->{$hdr}) );
    }

    # ToDo: attachments
    # do any attachments we might have
    # foreach my $attachment ( @{$email->{attachments}} ) {
    #     $msg->attach( %$attachment );
    # }

    # put our own X-Mailer header on the email
    $msg->replace( q{x-mailer}, q{DropMail - http://www.github.com/appsattic/dropmail} );

    # finally, send the message
    $msg->send();
}

sub _flatten {
    my ($thing) = @_;

    return unless defined $thing;

    if ( ref $thing eq 'ARRAY' ) {
        return join( ', ', @$thing );
    }
    elsif ( ref $thing ) {
        # not sure what to do with other references, so stringify it
        return "$thing";
    }

    # else, just a scalar
    return $thing;
}

## ----------------------------------------------------------------------------

=head1 NAME

dropmail - send email easily, and without confusion

=head1 WHY DROPMAIL

DropMail is a small program which runs intermittently, reads a directory for
files, reads them and tries to send each one as an email using the contents
supplied inside the file.

The main reason for using this program is so that your programs or websites can
still send email, but they don't have to try and use any of the mail clients or
libraries around to do the cause, they just write a small datastructure out to
a file in JSON format and this program does the rest.

They also don't have to wait around for the MTA to accept each and every mail,
and instead can concentrate on serving the request as soon as possible so it
can return to the user for a speedy looking website.

=head1 THE PHILOSOPHY OF DROPMAIL

DropMail has been written so you don't have to figure out all those sodding
email interfaces again and again. Just create a datastructure, save it in JSON
format to a particular directory and carry on, knowing that dropmail will send
it for you sometime soon.

=head1 SYNOPSIS

    use JSON::Any;
    use File::Slurp;

    my $email = {
        to    => 'someone@example.com',
        from  => 'someone@example.org',
        # cc  => # scalar or array
        # bcc => # scalar or array
        copy_self => 1, # default 0, copy 'from' address to the 'bcc' list
        subject => 'Hello, World!',
        text => 'This is the content', # required
        html => '<p>This is the content</p>', # optional
        # attachments => [ ... ] # coming soon
    };

    write_file( q{/var/lib/dropmail/myprog/0001.json}, JSON::Any->objToJson($email) );
    write_file( q{/var/lib/dropmail/myprog/cafebabe.json}, JSON::Any->objToJson($email) );
    write_file( q{/var/lib/dropmail/myprog/20110301222141-wxyz.json}, JSON::Any->objToJson($email) );

=head1 COPYRIGHT & LICENSE

Written by Andrew Chilton for AppsAttic Ltd.

Copyright 2010-2011, AppsAttic Ltd.

This program is free software; you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.

This program is distributed in the hope that it will be useful, but without any
warranty; without even the implied warranty of merchantability or fitness for a
particular purpose.

=cut
